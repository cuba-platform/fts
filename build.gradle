/*
 * Copyright (c) 2011 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

allprojects {
    ext.artifactGroup = 'com.haulmont.fts'
    ext.artifactVersion = cubaVersion.replace('-SNAPSHOT', '')
    ext.isSnapshot = cubaVersion.endsWith('-SNAPSHOT')
    ext.vcs = 'svn'
    //ext.tomcatDir = rootDir.absolutePath + '/../tomcat'
}

buildscript {
    ext.cubaVersion = '5.2-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - FTS Version ${ext.cubaVersion}")
    println("")
    
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

def globalModule = project(':fts-global')
def coreModule = project(':fts-core')
def webModule = project(':fts-web')
def webLegacyModule = project(':fts-web6')

def baseVersion = artifactVersion + (isSnapshot ? '-SNAPSHOT' : '')

configure([globalModule, coreModule, webModule, webLegacyModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'checkstyle')
    apply(plugin: CubaPlugin)

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile(group: 'junit', name: 'junit', version: '4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir' : checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }
}

configure(coreModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
        compile(group: 'org.apache.lucene', name: 'lucene-core', version: '4.4.0')
        compile(group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '4.4.0')
        compile(group: 'com.haulmont.thirdparty.lucene.morphology', name: 'russian', version: '1.3.h')
        compile(group: 'com.haulmont.thirdparty.lucene.morphology', name: 'english', version: '1.3.h')
        compile(group: 'com.haulmont.thirdparty.lucene.morphology', name: 'morph', version: '1.3.h')
        compile(group: 'org.apache.tika', name: 'tika-parsers', version: '1.3') {
            exclude(group: 'org.apache.poi', module: 'poi')
        }
        compile(group: 'org.apache.pdfbox', name: 'pdfbox', version: '1.7.1')

        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'tests')
    }
}

configure(webModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
    }
}

configure(webLegacyModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web6', version: baseVersion)
    }
}
